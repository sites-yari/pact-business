// Project Mixins **************************


// Breakpoints ************

// Direct Breakpoint

@mixin target-xs {
  @media (min-width: #{$break-xs}) and (max-width: #{$break-sm - 1px}) { 
    @content;
  }
}
@mixin target-sm {
  @media (min-width: #{$break-sm}) and (max-width: #{$break-md - 1px}) {
    @content;
  }
}
@mixin target-md {
  @media (min-width: #{$break-md}) and (max-width: #{$break-lg - 1px}) {
    @content;
  }
}
@mixin target-lg {
  @media (min-width: #{$break-lg}) and (max-width: #{$break-xl - 1px}) {
    @content;
  }
}
@mixin target-xl {
  @media (min-width: #{$break-xl}) {
    @content;
  }
}
@mixin target-xxl {
  @media (min-width: #{$break-xxl}) {
    @content;
  }
}

// Breakpoint XS 

@mixin target-xs-plus {
  @media (min-width: #{$break-xs}) {
    @content;
  }
}
@mixin target-xs-sm {
  @media (min-width: #{$break-xs}) and (max-width: #{$break-md - 1px}) {
    @content;
  }
}
@mixin target-xs-md {
  @media (min-width: #{$break-xs}) and (max-width: #{$break-lg - 1px}) {
    @content;
  }
}
@mixin target-xs-lg {
  @media (min-width: #{$break-xs}) and (max-width: #{$break-xl - 1px}) {
    @content;
  }
}
@mixin target-xs-xl {
  @media (min-width: #{$break-xs}) and (max-width: #{$break-xxl - 1px}) {
    @content;
  }
}

// Breakpoint SM

@mixin target-sm-plus {
  @media (min-width: #{$break-sm}) {
    @content;
  }
}
@mixin target-sm-md {
  @media (min-width: #{$break-sm}) and (max-width: #{$break-lg - 1px}) {
    @content;
  }
}
@mixin target-sm-lg {
  @media (min-width: #{$break-sm}) and (max-width: #{$break-xl - 1px}) {
    @content;
  }
}
@mixin target-sm-xl {
  @media (min-width: #{$break-sm}) and (max-width: #{$break-xxl - 1px}) {
    @content;
  }
}

// Breakpoint MD

@mixin target-md-plus {
  @media (min-width: #{$break-md}) {
    @content;
  }
}
@mixin target-md-lg {
  @media (min-width: #{$break-md}) and (max-width: #{$break-xl - 1px}) {
    @content;
  }
}
@mixin target-md-xl {
  @media (min-width: #{$break-md}) and (max-width: #{$break-xxl - 1px}) {
    @content;
  }
}

// Breakpoint LG

@mixin target-lg-plus {
  @media (min-width: #{$break-lg}) {
    @content;
  }
}
@mixin target-lg-xl {
  @media (min-width: #{$break-lg}) and (max-width: #{$break-xxl - 1px}) {
    @content;
  }
}


// Properties *************

// Box Shadow Property

@mixin box-shadow($shadow...) {
  -webkit-box-shadow: $shadow;
     -moz-box-shadow: $shadow;
      -ms-box-shadow: $shadow;
          box-shadow: $shadow;
}

// Drop-shadow Property

@mixin drop-shadow($arg) {
    -webkit-box-shadow: $arg;
       -moz-box-shadow: $arg;
            box-shadow: $arg;
}

// Border Radius Property

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
          border-radius: $radius;
}

// Background Size Property

@mixin background-size($size) {
    -webkit-background-size: $size;
       -moz-background-size: $size;
            background-size: $size;
}

// Transition Property

@mixin transition($args...) {
    -webkit-transition: $args;
       -moz-transition: $args;
        -ms-transition: $args;
         -o-transition: $args;
            transition: $args;
}

// Placeholder Property

@mixin placeholder-color($color) {
    &::-webkit-input-placeholder { color: $color; opacity:  1 }
              &:-moz-placeholder { color: $color; opacity:  1 }
             &::-moz-placeholder { color: $color; opacity:  1 }
         &:-ms-input-placeholder { color: $color; opacity:  1 }
             &:placeholder-shown { color: $color; opacity:  1 }
}

// Transform Property

@mixin transform($args...) {
    -webkit-transform: $args;
       -moz-transform: $args;
         -o-transform: $args;
            transform: $args;
}

// Transform(scale) Property

@mixin scale($args...) {
  -webkit-transform : scale($args);
      -ms-transform : scale($args);
       -o-transform : scale($args);
          transform : scale($args);
}

// Transform(rotate) Property

@mixin rotate($angle) {
    -webkit-transform: rotate($angle);
       -moz-transform: rotate($angle);
         -o-transform: rotate($angle);
            transform: rotate($angle);
}

// Transform(translate3d) Property

@mixin translate3d($x, $y, $z) {
  -webkit-transform: translate3d($x, $y, $z);
     -moz-transform: translate3d($x, $y, $z);
       -o-transform: translate3d($x, $y, $z);
          transform: translate3d($x, $y, $z);
}

// Animation Property

@mixin animation($animate...) {
    $max: length($animate);
    $animations: '';

    @for $i from 1 through $max {
        $animations: #{$animations + nth($animate, $i)};

        @if $i < $max {
            $animations: #{$animations + ", "};
        }
    }
    -webkit-animation: $animations;
    -moz-animation:    $animations;
    -o-animation:      $animations;
    animation:         $animations;
}

// Keyframes Property

@mixin keyframes($animationName) {
    @-webkit-keyframes #{$animationName} {
        @content;
    }
    @-moz-keyframes #{$animationName} {
        @content;
    }
    @-o-keyframes #{$animationName} {
        @content;
    }
    @keyframes #{$animationName} {
        @content;
    }
}

// Animation-name Property

@mixin animation-name($arg) {
  -webkit-animation-name: $arg;
     -moz-animation-name: $arg;
       -o-animation-name: $arg;
          animation-name: $arg;
}

// Animation-fill-mode Property

@mixin animation-fill-mode($arg) {
  -webkit-animation-fill-mode: $arg;
     -moz-animation-fill-mode: $arg;
       -o-animation-fill-mode: $arg;
          animation-fill-mode: $arg;
}

// Animation-duration Property

@mixin animation-duration($arg) {
  -webkit-animation-duration: $arg;
     -moz-animation-duration: $arg;
       -o-animation-duration: $arg;
          animation-duration: $arg;
}

// Animation-iteration-count Property

@mixin animation-iteration-count($arg) {
  -webkit-animation-iteration-count: $arg;
     -moz-animation-iteration-count: $arg;
       -o-animation-iteration-count: $arg;
          animation-iteration-count: $arg;
}

// Animation-timing-function Property

@mixin animation-timing-function($arg) {
  -webkit-animation-timing-function: $arg;
     -moz-animation-timing-function: $arg;
       -o-animation-timing-function: $arg;
          animation-timing-function: $arg;
}

// Animation-delay Property

@mixin animation-delay($arg) {
    -webkit-animation-delay: $arg;
       -moz-animation-delay: $arg;
            animation-delay: $arg;
}


// Filters & Utility *************

// Black & White Filter

@mixin b-and-w {
    -webkit-filter : grayscale(100%);
            filter : gray;
            filter : grayscale(100%);
}

// Remove Black & White Filter

@mixin no-b-and-w {
    -webkit-filter : grayscale(0);
            filter : none;
            filter : grayscale(0);
}

// Background Opacity Filter

@mixin background-opacity($color, $opacity: 0.3) {
    background: $color;
    background: rgba($color, $opacity);
}

// Gradient (Vertical) Filter

@mixin gradient-vertical($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
  background-image: -webkit-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);
  background-image: -o-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);
  background-image: linear-gradient(to bottom, $start-color $start-percent, $end-color $end-percent);
  background-repeat: repeat-x;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0)
}

// Gradient (Directional) Filter

@mixin gradient-directional($start-color: #555, $end-color: #333, $deg: 45deg) {
  background-repeat: repeat-x;
  background-image: -webkit-linear-gradient($deg, $start-color, $end-color);
  background-image: -o-linear-gradient($deg, $start-color, $end-color);
  background-image: linear-gradient($deg, $start-color, $end-color);
}

// Gradient (Radial) Filter

@mixin gradient-radial($inner-color: #555, $outer-color: #333) {
  background-image: -webkit-radial-gradient(circle, $inner-color, $outer-color);
  background-image: radial-gradient(circle, $inner-color, $outer-color);
  background-repeat: no-repeat;
}

// Gradient (Stripes) Filter

@mixin gradient-striped($color: rgba(255,255,255,.15), $angle: 45deg) {
  background-image: -webkit-linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
  background-image: -o-linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
  background-image: linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
}